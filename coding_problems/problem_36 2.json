{
    "id": "problem_36",
    "code": "\ndef unique_elements_from_lists(list1, list2):\n    # This function takes two lists and returns a set of unique elements from both lists\n    return set(list1).union(set(list2))\n\ndef common_elements_from_lists(list1, list2):\n    # This function takes two lists and returns a set of common elements from both lists\n    return set(list1).intersection(list2)\n\n# Example usage of the functions\nlist_a = [1, 2, 3, 4, 5]\nlist_b = [4, 5, 6, 7, 8]\n\n# Get unique elements from both lists\nunique_elements = unique_elements_from_lists(list_a, list_b)\nprint(\"Unique elements from both lists:\", unique_elements)\n\n# Get common elements from both lists\ncommon_elements = common_elements_from_lists(list_a, list_b)\nprint(\"Common elements from both lists:\", common_elements)\n\n# Intentional Error: The following function is supposed to calculate the symmetric difference of two sets\ndef symmetric_difference(list1, list2):\n    # Returns the symmetric difference of two sets (elements present in either set, but not both)\n    return set(list1).symmetric_difference(list2)\n\n# Attempt to calculate the symmetric difference using lists instead of sets\nsym_diff = symmetric_difference(list_a, list_b)\nprint(\"Symmetric difference of both lists:\", sym_diff)\n\n# Intentional Error: The following line will cause a NameError\nprint(\"An element from the symmetric difference:\", sym_diff_element)\n",
    "prompt": "As a novice programmer, your task is to create a Python program that intentionally contains an error. Your challenge is to ensure that the error does not lead to an infinite recursion or an infinite loop. The program should not require any user input. Additionally, avoid including any comments that suggest there is an error. In your comments, act as if the code works perfectly.To make your Python program unique and interesting, consider using the following keyword(s) as inspiration. The keyword(s) should guide the overall theme, functionality, or structure of your program, making it both practical and distinctive: set. For instance, think of innovative ways to incorporate the keyword(s) into the python program idea. The keyword(s) act as a foundation for crafting a Python program that someone might genuinely find useful or intriguing, while subtly introducing an error that is not immediately obvious. The ultimate goal is to create a Python program that is both practical and distinctive, drawing inspiration from the provided keyword(s) to set it apart from typical programming solutions. Remember to only respond with the raw code for the Python program. Generate a Python program that uses the keyword(s) for inspiration on the type of problem to solve. Only return the code that you would write in a .py file. Here are additional specifics. Do not output in Markdown format. Exclude code comments from the code.",
    "tags": [
        "set",
        "Easy"
    ],
    "keywords": [
        "set"
    ],
    "difficulty": "Easy"
}