{
    "id": "problem_84",
    "code": "\nfrom scipy.linalg import inv\nimport numpy as np\n\n# Define a function to reverse a dictionary, using setdefault to handle duplicates\ndef reverse_dict_with_setdefault(original_dict):\n    reversed_dict = {}\n    for key, value in original_dict.items():\n        reversed_dict.setdefault(value, []).append(key)\n    return reversed_dict\n\n# Define a function to reverse a 2D matrix using scipy\ndef reverse_matrix(matrix):\n    return inv(matrix)\n\n# Example dictionary to reverse\nexample_dict = {\n    'a': 1,\n    'b': 2,\n    'c': 1,\n    'd': 3\n}\n\n# Example matrix to reverse\nexample_matrix = np.array([\n    [1, 2],\n    [3, 4]\n])\n\n# Reverse the dictionary\nreversed_example_dict = reverse_dict_with_setdefault(example_dict)\nprint(\"Reversed dictionary:\", reversed_example_dict)\n\n# Reverse the matrix\nreversed_example_matrix = reverse_matrix(example_matrix)\nprint(\"Reversed matrix:\\n\", reversed_example_matrix)\n\n# Introduce an intentional error: trying to reverse a singular matrix\nsingular_matrix = np.array([\n    [2, 4],\n    [1, 2]\n])\nreversed_singular_matrix = reverse_matrix(singular_matrix)\nprint(\"Reversed singular matrix:\\n\", reversed_singular_matrix)\n",
    "output": "Reversed dictionary: {1: ['a', 'c'], 2: ['b'], 3: ['d']}\nReversed matrix:\n [[-2.   1. ]\n [ 1.5 -0.5]]\nTraceback (most recent call last):\n  File \"<stdin",
    "tags": [
        "reverse",
        "scipy",
        "setdefault",
        "Hard"
    ]
}